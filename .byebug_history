c
:name.name
:name
it { should validate_presence_of(:name) }
c
author
c
author
c
author
n
nn
n
author
c
author
c
author
c
author.to_param
author
c
author
c
author
c
author
:author
c
author.to_param
id: author.to_param
:author.name
author.name
author
c
:author.namec
:author.name
:author
author
c
 expect(response).to render_template(new)
params
author.params
author:{name: ''}
params: { author:{name: ''}}
c
to_not c
to_not 
c
not_change(Author, :count).by(1)
   81:       end
   80:         }.to not_change(Author, :count)
   79:           post :create, params: { author: {name: '' } }
expect { byebug
not_change
name: '' 
 author: {name: '' }
post :create, params: { author: {name: '' } }
c
expect(response).to redirect_to(Author.last)
redirect_to(Author.last)
redirect_to
expect(response)
expect(response).to redirect_to(Author.last)
author: author_attributes
params: { author: author_attributes}
post :create 
author_attributes = FactoryBot.attributes_for(:author)
FactoryBot.attributes_for(:author)
author_attributes
c
by(1)
change(Author, :count)
change(Author, :count).by(1)
post :create, params: { author: author_attributes }
expect
author_attributes = FactoryBot.attributes_for(:author)
FactoryBot.attributes_for(:author)
author_attributes
c
params:{name: "narendra"}c
params:{name: "narendra"}
c
to_param
param
params
c
 author
name: author
author_count + 1
c
 author.name
name:
params:{name: author.name}
c
author.name
author
{name: author.to_param}
 params:
params
post :create
author_count = Author.count
c
params(author)
c
author
params:(author)
:create
symbolize_keys
post :create, params:(author)
author_count = Author.count
c
n
params {id: author.to_param}
params: {id: author.to_param}n
c
author.to_param
c
nc
author.id
c
author.name
author.id
get :show
c
author.name
c
n
c
n
:author.name
:author.:name
author.name
:author.name
let(:author) { build(:author) }
c
:author.first_name
:author.name
:author
author
let(:author) { build(:author) }
c
n
c
n
c
n
nnn
nn
n
c
n
c
get :index
n
@author = Author.create(name:"sumit")
continue
n
c
n
c
get :index
c
n
@author = Author.create(name:"sumit")
c
n
c
n
c
get :index
@author
@autho
c
@author
n
c
n
c
n
c
n
c
n
c
n
continue
n
@book = Book.find(params[:id])
params
continue
c
book
book.id
@books.count
@books
c
book.borrowings.each do |borrowing| borrowing.status endc
book.borrowings.each do |borrowing| borrowing.status end
book.borrowings.each do |borrowing| 
book.borrowings.each do |borrowing| n
book.borrowings.each do |borrowing| c
book.borrowings.each do |borrowing|   n
book.borrowings.each do |borrowing|n
book.borrowings.each do |borrowing|
book.borrowings=
book.borrowings=2
book.borrowing
book.borrowings.count
book.borrowings
book
continue
n
@book.id
@book
@book.borrowings
@book
continue
params
