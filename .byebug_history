c
borrowing
book
c
 borrowing_attributes
c
FactoryBot.attributes_for(:borrowing,book: book)c
FactoryBot.attributes_for(:borrowing,book: book)
FactoryBot.attributes_for
borrowing
book
borrowing_attributes
c
borrowing_attributes
c
borrowing_attributes
c
 borrowing_attributes = FactoryBot.attributes_for(:borrowing,book: book)
borrowing_attributes
c
borrowing_attributes
c
borrowing.book.id
borrowing
c
borrowing_attributes
c
borrowing_attributes
c
change(Borrowing, :count).by(1)
 borrowing_attributes
borrowing: borrowing_attributes
params
borrowing_attributes = FactoryBot.attributes_for(:borrowing)
c
borrowing_attributes
login_user
c
 borrowing.to_param
id: borrowing.to_param
param = FactoryBot.attributes_for(:borrowing)
user_login.id
user_login
 login_user
c
borrowing
book
c
book
c
book
c
n
book.author
book.id
let(:book)      {create(:book)}
c
get :show,  params: {id: author.to_param}
author
n
c
n
c
nn
n
nn
n
author
c
params: {id: author.to_param}c
params: {id: author.to_param}
author.name
n
author
c
author.name
n
author
c
continue~c
author
@author
n
:author.name
author.name
:author
author
n
author
athor
author
c
bookc
book
n
book
c
book
continue
borrowing.to_param
param
PARAM
param = FactoryBot.attributes_for(:borrowing)
FactoryBot.attributes_for(:borrowing)
continue
borrowing
continue
c
cc
c
bookc
book
c
book
n
book
c
:book
book
c
book.title
:book.title
title
book.name
book.id
book.titlle
:book
{create(:book)}
let(:book) 
book
c
cc
 Book must exist
book_id=>1
get :show,  params: {id: borrowing.to_param}book_id=>1
param = FactoryBot.attributes_for(:borrowing)
get :show,  params: {id: borrowing.to_param}
borrowing.to_param
:borrowing.id
borrowing.id
id
param
n
c
borrowing
borrowing.to_param
n
c
param
borrowing: param
n
c
n
 be_successful
to be_successful
n
to_param
param
n
c
param
n
 param
c
id: param.id
param
n
 param
FactoryBot.attributes_for(:borrowing)
param
c
 login_user
borrowing
borrowing.to_param
c
@author
 redirect_to @author
c
new
unprocessable_entity
status
status:
status: :unprocessable_entity
 :new
render :new
n
author_params
c
author_params
c
:new.id
:new
new
@author
c
@author
n
c
n
c
params
c
name:
author.id
c
author.name
author.id
name
author
put :update ,params: {author: {name: "shreesh"}}
c
nc
n
c
n
c
n
c
author
c
author.id
author
 let(:author) 
:author.name
author.name
:author
:author.id
author.id
author
c
borrowing.status == "returned"
borrowing.status
borrowing.nil?
unless borrowing.nil?
c
Borrowing.statuses
Borrowing.status
Borrowing
c
@borrowing.book.quantity
@borrowing.book.update(quantity:  @borrowing.book.quantity - 1 )
@borrowing.book.quantity - 1
@borrowing.book.quantity
@borrowing.update(borrowing_params)
@borrowing.status == "returned"
~@borrowing.status == "returned"
c
n
@borrowing.book.update(quantity:  @borrowing.book.quantity - 1 )
@borrowing.status =="approved"
@borrowing.status == "returned"
@borrowing.update(borrowing_params)
if @borrowing.update(borrowing_params)
params
c
:name.name
